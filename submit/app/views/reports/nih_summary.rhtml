<div id="testing">
<center>
<h1>Submission Statistics for NIH</h1>
<p>
This page provides an overview of the status' of the modENCODE submissions.</p>
</center>
<br />
<div id="released_submissions">
<%
require 'pp'
    colors = [ '#eeeeee', '#ffffff' ]
    i = 0
    organism_cv = ["organism", "Organism"]
    stage_cv = ["developmental_stage", "stage", "developmental stage", "Dev Stage"]
    strain_cv = ["strain", "whole_organism"]
    genotype_cv = ["genotype"]
    sex_cv = ["sex","Sex"]
    line_cv = ["cell_line","strain_or_line", "cell line culture"]
    tissue_cv = ["organism_part", "tissue", "Cell Type cv", "Cell Type"]
    animals_cv = ["stage", "strain", "whole_organism", "cell_line", "developmental_stage", "organism", "organism_part", "strain_or_line"]
    antibodies_cv = ["antibody"]
    #samples_cv = [ "mRNA", "polyA_RNA", "RNA", "polyadenylated_mRNA", "nuclear_RNA", "genomic_DNA", "total_RNA", "EST", "read", "transcript_region", "transfrag" ]
    files_cv = ["GFF3", "WIG", "BED"]
    feature_types = ["EST","transfrag", "mRNA", "miRNA", "peaks", "TF_binding_site", "insulator", "binding_site", "intron", "gene", "read", "transcript_region", "overlapping_EST_set"] 
    chip_assay = ["chromatin_immunoprecipitation"]
    expression_assay = ["microarray_scanning_protocol", "hybridization"]
    sequencing_assay = ["sequencing_protocol", "sequence analysis"]
    analysis_assay = ["data_analysis_protocol"]
    rtpcr_assay = ["PCR","reverse_transcription","PCR_amplification"]
%>

<%= link_to_unless_current "Released Projects", :action => :nih_summary, :filter => "released" %> |
<%= link_to_unless_current "Unreleased Projects", :action => :nih_summary, :filter => "unreleased" %>

<% @filter.each { |name, releasedness| %>
  <center><h2><%= name %></h2></center>
  <table class="summary_stats">
  <tr class="header">
    <th class="header" style='padding-left: 2px; padding-right: 2px; width: 50px;'>Released?</th>
    <th class="header" style='padding-left: 2px; padding-right: 2px; width: 150px;'>Release Date</th>
    <th class="header" style='padding-left: 2px; padding-right: 2px; width: 75px;'>PI</th>
    <th class="header" style='padding-left: 2px; padding-right: 2px; width: 75px;'>Lab</th>
    <th class="header" style='padding-left: 2px; padding-right: 2px; width: 200px;'>feature type</th>
    <th class="header" style='padding-left: 2px; padding-right: 2px; width: 100px;'>Assay</th>
    <th class="header" style='padding-left: 5px; padding-right: 5px; width: 300px;'>Submission Title</th>
    <th class="header" style='padding-left: 5px; padding-right: 5px; width: 100px;'>Organism</th>
    <th class="header" style='padding-left: 5px; padding-right: 5px; width: 30px;'>Sex</th>
    <th class="header" style='padding-left: 5px; padding-right: 5px; width: 200px;'>Strain/CellLine</th>
    <th class="header" style='padding-left: 5px; padding-right: 5px; width: 200px;'>Stage</th>
    <th class="header" style='padding-left: 5px; padding-right: 5px; width: 200px;'>Tissue/Cell Type</th>
    <th class="header" style='padding-left: 5px; padding-right: 5px; width: 100px'>Antibody</th>
    <th class="header" style='padding-left: 2px; padding-right: 2px;'>More Info</th>
  </tr>
  <%
  all_projects = Project.all.reject { |p| p.deprecated? }
  if params[:projects] then
    only_projects = params[:projects].split(",").map { |pid| pid.to_i }
    all_projects = all_projects.find_all { |p| only_projects.include?(p.id) }
  end
  all_projects.find_all{|p| p.released? == releasedness }.sort{ |p1,p2| 
    ((p1.pi <=> p2.pi) != 0) ? p1.pi <=> p2.pi : p2.updated_at <=> p1.updated_at
  }.each do |p|
      i += 1
      all_cvterms = organism_cv + stage_cv + strain_cv + genotype_cv + line_cv + sex_cv + tissue_cv + animals_cv + antibodies_cv + files_cv
      all_tags = TrackTag.find_all_by_project_id_and_cvterm(p.id, all_cvterms.uniq)
      organism_reagents = all_tags.find_all { |t| organism_cv.include?(t.cvterm) }
      stage_reagents = all_tags.find_all { |t| stage_cv.include?(t.cvterm) }
      strain_reagents = all_tags.find_all { |t| strain_cv.include?(t.cvterm) }
      sex_reagents = all_tags.find_all { |t| sex_cv.include?(t.cvterm) }
      line_reagents = all_tags.find_all { |t| line_cv.include?(t.cvterm) }
      tissue_reagents = all_tags.find_all { |t| tissue_cv.include?(t.cvterm) }
      animal_reagents = all_tags.find_all { |t| animals_cv.include?(t.cvterm) }
      antibody_reagents = all_tags.find_all { |t| antibodies_cv.include?(t.cvterm) }
      file_reagents = all_tags.find_all { |t| files_cv.include?(t.cvterm) }

      if organism_reagents.size > 1 && !organism_reagents.find { |o| o.name == "Organism" }.nil? then
        organism_reagents = [ organism_reagents.find { |o| o.name == "Organism" } ]
      end

      organism = organism_reagents.length>0? "#{organism_reagents.map{|o| o.value}.uniq.compact.join(', ')}" : "-"
      organism = "C. elegans" if organism=="Caenorhabditis elegans"
      organism = "D. mel" if organism=="Drosophila melanogaster"
      strain = strain_reagents.length > 0 ? strain_reagents.map{|t| t.value}.uniq.map{|s| s.split(":")[1] ? s.split(":")[1] : s}.uniq.compact : []
      line = line_reagents.length > 0 ? line_reagents.map{|t| t.value}.uniq.map{|c| c.split(":")[1] ? c.split(":")[1] : c }.uniq.compact : []
      strain = line if strain.size==0
      if strain.size > 0 then
	new_strain = []
	strain.each { |s|
	  t = TrackTag.find_by_project_id_and_cvterm_and_name(p.id, "official name", s)
	  t = TrackTag.find_by_project_id_and_cvterm_and_name(p.id, "aliases", s) if t.nil?
	  new_strain.push t.value unless t.nil?
	}
	strain = new_strain if new_strain.size > 0
      end
      strain = strain.join(",<br/>")
      strain = "-" if strain.length==0
      strain.sub!(/&oldid=\d*/, '');
      stage = stage_reagents.length>0 ? "#{stage_reagents.map{|t| t.value}.uniq.map{|s| s.split(":")[1] ? s.split(":")[1] : s }.compact.join(",<br />")}" : "-" 
      sex = sex_reagents.length>0 ? "#{sex_reagents.map{|t| t.value}.uniq.compact.join(",")}" : "-"

      tissue = tissue_reagents.length>0 ? "#{tissue_reagents.map{|t| t.value}.uniq.map{|q| b = q.split(':'); b[b.length>1 ? 1 : 0]}.join(',<br />')}" : "-"
      antibody = antibody_reagents.length > 0 ? "#{antibody_reagents.map{|t| t.value}.uniq.map{|a| a.split("&oldid")[0]}.map{|a| a.split(":").length>1? a.split(":")[1] : a}.join(", ") }" : "-"
      pi = "#{User.find(p.user_id).pi.split(",")[0]}"
      subgroup = TrackTag.find_by_project_id_and_name(p.id, "Lab"); 
      subgroup = subgroup ? subgroup.value : ""

      type_tags = TrackTag.find_all_by_project_id_and_cvterm(p.id, 'protocol_type')
      assay = ""
      assay = "ChIP-chip" if (type_tags.find_all{|tag| chip_assay.include?(tag.value)}.length>0 && type_tags.find_all{|tag| expression_assay.include?(tag.value)}.length>0)
      assay = type_tags.find_all { |tag| expression_assay.include?(tag.value) }.length>0 ? "array" : "" if assay.length==0
      assay += type_tags.find_all { |tag| rtpcr_assay.include?(tag.value) }.length>0 ? "RTPCR" : "" if assay.length==0
      assay = type_tags.find { |tag| sequencing_assay.include?(tag.value) }.nil? ? "" : "RNA-Seq" if assay.length == 0
      if assay.length == 0 then
        tag = TrackTag.find(:first, :conditions => { :cvterm => "protocol_type", :project_id => p.id }, :select => "name, history_depth", :group => "name, history_depth", :order => "history_depth DESC", :limit => 1)
        assay = "\"#{tag.name}\"" unless tag.nil?
      end
      assay = "-" if assay.length==0
      #features = TrackTag.find(:all, :conditions => [ "project_id = ? AND name = ?", p.id, "Feature"], :select => "cvterm", :group => "cvterm").map{|c| c.cvterm if !(c.cvterm=~/match/)}.compact.join(",<br />")
      features = @all_types_by_project.find_all { |tt| tt.project_id == p.id }.map { |tt| tt.cvterm }.reject { |cvterm| cvterm =~ /match/ }.join(",<br/>")
      title = TrackTag.find_by_project_id_and_name(p.id, 'Investigation Title')
      title = title.nil? ? p.name : title.value
      is_released = p.status==Project::Status::RELEASED ? "Y" : "N"
      if is_released == "Y" && TrackTag.find_by_project_id(p.id).nil? then
        is_released = "Y (retrofitting)"
      end
      release_date = ""
      if p.status==Project::Status::RELEASED && Command.find_all_by_project_id_and_type(p.id, "Release").size > 0 then
        release_date = Command.find_all_by_project_id_and_type(p.id, "Release").last.end_time.strftime("%b %d '%y")
      end
      if p.status == Project::Status::RELEASED && release_date.length == 0 then
	release_date = p.updated_at.strftime("%b %d '%y")
      end
      release_date = "&nbsp;" unless release_date.length > 0
  %>
    <tr style="background-color: <%=colors[i%2]%>">
      <td><%=is_released %> </td>
      <td><%=release_date%></td>
      <td><%=pi%> </td>
      <td><%=subgroup%></td>
      <td style="text-align: left;"><%=features%></td>
      <td><%=controller.unescape assay%></td>
      <td style="text-align: left;"><%=title%></td>
      <td><%=organism%></td>
      <td><%=sex%></td>
      <td><%=controller.unescape strain%></td>
      <td style="text-align: left;"><%=controller.unescape stage%></td>
      <td style="text-align: left;"><%=controller.unescape tissue%></td>
      <td><%=controller.unescape antibody%></td>
      <td>
        <%= link_to("citation", :controller => :public, :action => :citation, :id => p.id) + "<br/>" if p.released? %>
        <%= link_to("show&nbsp;project", :controller => :pipeline, :action => :show, :id => p.id) %>
      </td>
    </tr>
  <% end %>
  </table>
  <br />
  <br />
  <br />
<% } %>


</center>
</div>

</div>
